{
  "stats": {
    "suites": 14,
    "tests": 48,
    "passes": 48,
    "pending": 0,
    "failures": 0,
    "start": "2020-10-20T06:53:35.371Z",
    "end": "2020-10-20T06:53:39.661Z",
    "duration": 4290,
    "testsRegistered": 48,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4fe890b7-dbaf-4b49-a08a-8b1f27843713",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "44f9a9d4-6038-4f2a-a90a-7a0276c2a45d",
          "title": "App test",
          "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
          "file": "\\test\\app.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"App test\"",
              "fullTitle": "App test \"before all\" hook in \"App test\"",
              "timedOut": false,
              "duration": 1129,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(15000);\n// starting local server\nserver = app.listen(5001);\n// inserting all tests into mock database\nawait User.insertMany(testInput.userTests);\nawait ItemBlock.insertMany(testInput.itemTests);\nawait ProfileBlock.insertMany(testInput.profileTests);",
              "err": {},
              "uuid": "9a07117b-1832-4462-9f2f-602d5cc00b69",
              "parentUUID": "44f9a9d4-6038-4f2a-a90a-7a0276c2a45d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"App test\"",
              "fullTitle": "App test \"after all\" hook in \"App test\"",
              "timedOut": false,
              "duration": 140,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(15000);\nawait User.deleteMany({});\nawait ItemBlock.deleteMany({});\nawait ProfileBlock.deleteMany({});\nawait mongoose.connection.close();\nawait server.close();",
              "err": {},
              "uuid": "1395ef25-0a8b-4b9c-b5e7-f5cdd3a3fe56",
              "parentUUID": "44f9a9d4-6038-4f2a-a90a-7a0276c2a45d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "2abb9382-224d-4449-8211-bad78bf53045",
              "title": "Getting all users from database",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Getting all existing users",
                  "fullTitle": "App test Getting all users from database Getting all existing users",
                  "timedOut": false,
                  "duration": 100,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(15000);\nrequest(app)\n\t.get('/api/users/alluser')\n\t.expect('Content-Type', /json/)\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "2c6bf853-ecd9-4bdb-8f7b-d9d258af8ff9",
                  "parentUUID": "2abb9382-224d-4449-8211-bad78bf53045",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2c6bf853-ecd9-4bdb-8f7b-d9d258af8ff9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 100,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3c3e1577-38cc-4966-a8e3-1525a29cb3ac",
              "title": "Login a user into our website",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "User logins in with incorrect email",
                  "fullTitle": "App test Login a user into our website User logins in with incorrect email",
                  "timedOut": false,
                  "duration": 124,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/login')\n\t.send(testInput.loginInvalidEmail)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tmessage: 'Email or Password is incorrect'\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "4188cbd4-3763-41f1-91c6-f0341756ded1",
                  "parentUUID": "3c3e1577-38cc-4966-a8e3-1525a29cb3ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "User logins in with incorrect password",
                  "fullTitle": "App test Login a user into our website User logins in with incorrect password",
                  "timedOut": false,
                  "duration": 236,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/login')\n\t.send(testInput.loginInvalidPassword)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tmessage: 'Email or Password is incorrect'\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "9cb77b7f-c2cf-424c-8f44-551ff66e1146",
                  "parentUUID": "3c3e1577-38cc-4966-a8e3-1525a29cb3ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "User puts correct credentials but did not confirm email",
                  "fullTitle": "App test Login a user into our website User puts correct credentials but did not confirm email",
                  "timedOut": false,
                  "duration": 210,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/login')\n\t.send(testInput.loginEmailNotConfirm)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tmessage: 'Confirm your email'\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "2af0cb69-f70a-4780-ade3-88895f74b0db",
                  "parentUUID": "3c3e1577-38cc-4966-a8e3-1525a29cb3ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "User logs in successfully",
                  "fullTitle": "App test Login a user into our website User logs in successfully",
                  "timedOut": false,
                  "duration": 206,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/login')\n\t.send(testInput.loginOkay)\n\t.expect('Content-Type', /json/)\n\t.expect(200)\n\t.end((err, res) => {\n\t\tuser_id = res.body.userAuthToken._id;\n\t\taccess_token = res.body.userAuthToken.token;\n\t\trefresh_token = res.body.userAuthToken.refresh_token;\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "617b4179-82a2-4ec0-ba09-254648a7fca7",
                  "parentUUID": "3c3e1577-38cc-4966-a8e3-1525a29cb3ac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4188cbd4-3763-41f1-91c6-f0341756ded1",
                "9cb77b7f-c2cf-424c-8f44-551ff66e1146",
                "2af0cb69-f70a-4780-ade3-88895f74b0db",
                "617b4179-82a2-4ec0-ba09-254648a7fca7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 776,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cc14d03f-c3c6-440a-997f-6f2e5214d06f",
              "title": "Authenticate JWT",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Incorrect JWT provided",
                  "fullTitle": "App test Authenticate JWT Incorrect JWT provided",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/authenticate')\n\t.set(\"Authorization\", testInput.authInvalidToken)\n\t.expect({\n\t\tmessage: \"Token provided is invalid\",\n\t\tstatus: false\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "2793c4c2-705c-4d8d-87bd-050b64b09527",
                  "parentUUID": "cc14d03f-c3c6-440a-997f-6f2e5214d06f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Bearer header not provided",
                  "fullTitle": "App test Authenticate JWT Bearer header not provided",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/authenticate')\n\t.set(\"Authorization\", testInput.authBearerNotProvided)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tmessage: \"Token provided is invalid\",\n\t\tstatus: false\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "1ea2a2df-1613-4436-8583-da37899e4cb0",
                  "parentUUID": "cc14d03f-c3c6-440a-997f-6f2e5214d06f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid access token provided",
                  "fullTitle": "App test Authenticate JWT Valid access token provided",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/authenticate')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.expect('Content-Type', /json/)\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "f254dcfc-4bfc-497a-86e6-ac4e26fdf531",
                  "parentUUID": "cc14d03f-c3c6-440a-997f-6f2e5214d06f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2793c4c2-705c-4d8d-87bd-050b64b09527",
                "1ea2a2df-1613-4436-8583-da37899e4cb0",
                "f254dcfc-4bfc-497a-86e6-ac4e26fdf531"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d5eac982-9de9-45aa-9627-66cd202c5919",
              "title": "Testing /api/itemblocks/create route",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Create item block with correct details",
                  "fullTitle": "App test Testing /api/itemblocks/create route Create item block with correct details",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const correctItemDetails = testInput.correctItemDetails;\ncorrectItemDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/itemblocks/create')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(correctItemDetails)\n\t.expect('Content-Type', /json/)\n\t.expect(201)\n\t.end((err, res) => {\n\t\titem_id = res.body.item._id;\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "ea782335-b3ea-44fa-b648-1de4de107656",
                  "parentUUID": "d5eac982-9de9-45aa-9627-66cd202c5919",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create item block with incorrect details",
                  "fullTitle": "App test Testing /api/itemblocks/create route Create item block with incorrect details",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const incorrectItemDetails = testInput.incorrectItemDetails;\nincorrectItemDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/itemblocks/create')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(incorrectItemDetails)\n\t.expect('Content-Type', /json/)\n\t.expect(500, done);",
                  "err": {},
                  "uuid": "0d675de7-8050-4c23-ba58-f8e95a3a5400",
                  "parentUUID": "d5eac982-9de9-45aa-9627-66cd202c5919",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create item block with missing details",
                  "fullTitle": "App test Testing /api/itemblocks/create route Create item block with missing details",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const missingItemDetails = testInput.missingItemDetails;\nmissingItemDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/itemblocks/create')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(missingItemDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Missing either user id, type of item block, its title or the contents body\"\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "1617aee6-1512-4b3c-b152-1040b27841da",
                  "parentUUID": "d5eac982-9de9-45aa-9627-66cd202c5919",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ea782335-b3ea-44fa-b648-1de4de107656",
                "0d675de7-8050-4c23-ba58-f8e95a3a5400",
                "1617aee6-1512-4b3c-b152-1040b27841da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 75,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b6e2d490-2a42-4aaf-8bf0-231e85fdf34a",
              "title": "Testing /api/itemblocks/update route",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Update item block with correct details",
                  "fullTitle": "App test Testing /api/itemblocks/update route Update item block with correct details",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rightUpdItemDetails = testInput.rightUpdItemDetails;\nrightUpdItemDetails.user_id = user_id;\nrightUpdItemDetails.item_id = item_id;\nrequest(app)\n\t.post('/api/itemblocks/update')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(rightUpdItemDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Item block has been successfully updated\"\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "e88bb156-9dc4-427e-b748-2ef8262d8d6d",
                  "parentUUID": "b6e2d490-2a42-4aaf-8bf0-231e85fdf34a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update item block with incorrect details",
                  "fullTitle": "App test Testing /api/itemblocks/update route Update item block with incorrect details",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const wrongUpdItemDetails = testInput.wrongUpdItemDetails;\nwrongUpdItemDetails.user_id = user_id;\nwrongUpdItemDetails.item_id = item_id;\nrequest(app)\n\t.post('/api/itemblocks/update')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(wrongUpdItemDetails)\n\t.expect('Content-Type', /json/)\n\t// incorrect details are ignored when updating item blocks\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "03509a06-20bc-4742-bb77-50cad058af1d",
                  "parentUUID": "b6e2d490-2a42-4aaf-8bf0-231e85fdf34a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update item block with missing details",
                  "fullTitle": "App test Testing /api/itemblocks/update route Update item block with missing details",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const missUpdItemDetails = {};\n// forgot item_id and contents \nmissUpdItemDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/itemblocks/update')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(missUpdItemDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Missing either user id, item id, or the body of change\"\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "1bca7ecd-f7d7-4182-9199-93f9cfe2b432",
                  "parentUUID": "b6e2d490-2a42-4aaf-8bf0-231e85fdf34a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e88bb156-9dc4-427e-b748-2ef8262d8d6d",
                "03509a06-20bc-4742-bb77-50cad058af1d",
                "1bca7ecd-f7d7-4182-9199-93f9cfe2b432"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 99,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1bcd00f4-7814-44c1-a9af-cefe437901cf",
              "title": "Testing /api/itemblocks/delete route",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Delete item block with missing details",
                  "fullTitle": "App test Testing /api/itemblocks/delete route Delete item block with missing details",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const missingDeleteItemDetails = {};\n// forgot item_id\nmissingDeleteItemDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/itemblocks/delete')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(missingDeleteItemDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Missing either user id or item id\"\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "f525c7a8-c209-4ee1-9f62-3689e9ad794e",
                  "parentUUID": "1bcd00f4-7814-44c1-a9af-cefe437901cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete item block with incorrect details",
                  "fullTitle": "App test Testing /api/itemblocks/delete route Delete item block with incorrect details",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const incorrectDeleteItemDetails = {};\nincorrectDeleteItemDetails.item_id = mongoose.Types.ObjectId('1121b706175df1546e3acb09');\nincorrectDeleteItemDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/itemblocks/delete')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(incorrectDeleteItemDetails)\n\t.expect('Content-Type', /json/)\n\t// even though item block doesn't exist, database operation still returns something\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "05ba189d-99d7-4494-8695-4370e66f7db2",
                  "parentUUID": "1bcd00f4-7814-44c1-a9af-cefe437901cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete item block with correct details",
                  "fullTitle": "App test Testing /api/itemblocks/delete route Delete item block with correct details",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const correctDeleteItemDetails = {};\ncorrectDeleteItemDetails.user_id = user_id;\ncorrectDeleteItemDetails.item_id = item_id;\nrequest(app)\n\t.post('/api/itemblocks/delete')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(correctDeleteItemDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Item block has been successfully deleted\"\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "9e29edbc-57de-4fd1-b24a-d83e089e3b86",
                  "parentUUID": "1bcd00f4-7814-44c1-a9af-cefe437901cf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f525c7a8-c209-4ee1-9f62-3689e9ad794e",
                "05ba189d-99d7-4494-8695-4370e66f7db2",
                "9e29edbc-57de-4fd1-b24a-d83e089e3b86"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 97,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b7bb6c26-93e9-4b2f-8cd8-6d4c2c5627e4",
              "title": "Testing /api/profileblocks/create route",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Create profile block with correct details",
                  "fullTitle": "App test Testing /api/profileblocks/create route Create profile block with correct details",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const correctProfileDetails = testInput.correctProfileDetails;\ncorrectProfileDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/profileblocks/create')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(correctProfileDetails)\n\t.expect('Content-Type', /json/)\n\t.expect(201)\n\t.end((err, res) => {\n\t\tprofile_id = res.body.profile._id;\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "a4ffc9d4-9e96-48b1-bfee-5d988d89cad8",
                  "parentUUID": "b7bb6c26-93e9-4b2f-8cd8-6d4c2c5627e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create profile block with missing details",
                  "fullTitle": "App test Testing /api/profileblocks/create route Create profile block with missing details",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// no user id is provided\nconst missingProfileDetails = testInput.missingProfileDetails;\nrequest(app)\n\t.post('/api/profileblocks/create')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(missingProfileDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tmessage: \"Request is invalid for current user\"\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "7f9bae7c-089d-4424-b5df-4c310fdf0752",
                  "parentUUID": "b7bb6c26-93e9-4b2f-8cd8-6d4c2c5627e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4ffc9d4-9e96-48b1-bfee-5d988d89cad8",
                "7f9bae7c-089d-4424-b5df-4c310fdf0752"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 64,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3fb2931b-9a02-47df-8b10-c0e0042021ab",
              "title": "Testing /api/profileblocks/update route",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Update profile block with correct details",
                  "fullTitle": "App test Testing /api/profileblocks/update route Update profile block with correct details",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rightUpdProfileDetails = testInput.rightUpdProfileDetails;\nrightUpdProfileDetails.user_id = user_id;\nrightUpdProfileDetails.profile_id = profile_id;\nrequest(app)\n\t.post('/api/profileblocks/update')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(rightUpdProfileDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Profile block has been successfully updated\"\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "9d9f37f0-cd07-4842-b631-f838ae235a3e",
                  "parentUUID": "3fb2931b-9a02-47df-8b10-c0e0042021ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update profile block with incorrect details",
                  "fullTitle": "App test Testing /api/profileblocks/update route Update profile block with incorrect details",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const wrongUpdProfileDetails = testInput.wrongUpdProfileDetails;\nwrongUpdProfileDetails.user_id = user_id;\n// profile block doesn't exist in test database\nwrongUpdProfileDetails.profile_id = mongoose.Types.ObjectId('f3d6c9d62d60d057f0644009');\nrequest(app)\n\t.post('/api/profileblocks/update')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(wrongUpdProfileDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Profile block does not exist in our database\"\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "e67f3e07-a85b-4a33-a83c-4c41333e08fb",
                  "parentUUID": "3fb2931b-9a02-47df-8b10-c0e0042021ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update profile block with missing details",
                  "fullTitle": "App test Testing /api/profileblocks/update route Update profile block with missing details",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const missUpdProfileDetails = {};\n// forgot profile_id and contents body \nmissUpdProfileDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/profileblocks/update')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(missUpdProfileDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Missing user id, profile id or profile attributes that needs to be changed\"\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "3b422ddd-2f65-496a-9ece-4f5c63b6d077",
                  "parentUUID": "3fb2931b-9a02-47df-8b10-c0e0042021ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9d9f37f0-cd07-4842-b631-f838ae235a3e",
                "e67f3e07-a85b-4a33-a83c-4c41333e08fb",
                "3b422ddd-2f65-496a-9ece-4f5c63b6d077"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 115,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "016f077a-153c-490c-905f-e27c838d8feb",
              "title": "Testing /api/profileblocks/delete route",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Delete profile block with missing details",
                  "fullTitle": "App test Testing /api/profileblocks/delete route Delete profile block with missing details",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const missingDeleteProfileDetails = {};\n// forgot profile_id\nmissingDeleteProfileDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/profileblocks/delete')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(missingDeleteProfileDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Missing user id or profile id\"\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "8634953d-0f73-4a85-8147-b4f7830f3782",
                  "parentUUID": "016f077a-153c-490c-905f-e27c838d8feb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete profile block with incorrect details",
                  "fullTitle": "App test Testing /api/profileblocks/delete route Delete profile block with incorrect details",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const incorrectDeleteProfileDetails = {};\nincorrectDeleteProfileDetails.profile_id = mongoose.Types.ObjectId('1121b706175df1546e3acb09');\nincorrectDeleteProfileDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/profileblocks/delete')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(incorrectDeleteProfileDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Profile block does not exist in our database\"\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "ad2a94d3-fc1f-4c0f-a0d2-98b9668cfd83",
                  "parentUUID": "016f077a-153c-490c-905f-e27c838d8feb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete profile block with correct details",
                  "fullTitle": "App test Testing /api/profileblocks/delete route Delete profile block with correct details",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const correctDeleteProfileDetails = {};\ncorrectDeleteProfileDetails.user_id = user_id;\ncorrectDeleteProfileDetails.profile_id = profile_id;\nrequest(app)\n\t.post('/api/profileblocks/delete')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(correctDeleteProfileDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Profile block has been successfully deleted\"\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "6c36bca1-b5a5-4091-b56c-576c6aa1117e",
                  "parentUUID": "016f077a-153c-490c-905f-e27c838d8feb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8634953d-0f73-4a85-8147-b4f7830f3782",
                "ad2a94d3-fc1f-4c0f-a0d2-98b9668cfd83",
                "6c36bca1-b5a5-4091-b56c-576c6aa1117e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 109,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5725ad75-eb18-488d-8587-1664617f8b05",
              "title": "Testing /api/users/update endpoint",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Correct details provided",
                  "fullTitle": "App test Testing /api/users/update endpoint Correct details provided",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const correctUserDetails = testInput.rightUpdateUserDetails;\ncorrectUserDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/users/update')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(correctUserDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"User details have been successfully updated\"\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "c6c33d30-65b0-4a57-a30d-338ded951d57",
                  "parentUUID": "5725ad75-eb18-488d-8587-1664617f8b05",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Missing body provided",
                  "fullTitle": "App test Testing /api/users/update endpoint Missing body provided",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const missingUserDetails = {};\nmissingUserDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/users/update')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(missingUserDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Include body of change\"\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "e39dc3b9-6863-493b-96dc-4e093119329e",
                  "parentUUID": "5725ad75-eb18-488d-8587-1664617f8b05",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c6c33d30-65b0-4a57-a30d-338ded951d57",
                "e39dc3b9-6863-493b-96dc-4e093119329e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 65,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cd02b3d9-d563-4426-9441-679e535f9537",
              "title": "Retrieve new access token",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Invalid refresh token is provided",
                  "fullTitle": "App test Retrieve new access token Invalid refresh token is provided",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/refresh')\n\t.send(testInput.invalidRefreshToken)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tmessage: \"Token is invalid\",\n\t\tstatus: false\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "19743fb7-0e70-40a7-bc89-ca4c3a6aa33a",
                  "parentUUID": "cd02b3d9-d563-4426-9441-679e535f9537",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid refresh token is provided",
                  "fullTitle": "App test Retrieve new access token Valid refresh token is provided",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const postBody = {\n\trefresh_token: refresh_token\n};\nrequest(app)\n\t.post('/api/users/refresh')\n\t.send(postBody)\n\t.expect('Content-Type', /json/)\n\t.expect(201, done);",
                  "err": {},
                  "uuid": "f3a9efee-55d6-493f-8043-ba401c9197df",
                  "parentUUID": "cd02b3d9-d563-4426-9441-679e535f9537",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "19743fb7-0e70-40a7-bc89-ca4c3a6aa33a",
                "f3a9efee-55d6-493f-8043-ba401c9197df"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 30,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a2c297dc-0a0c-4a49-85d0-77b54b22aaba",
              "title": "Register a new user in the database",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Register new user with unique email",
                  "fullTitle": "App test Register a new user in the database Register new user with unique email",
                  "timedOut": false,
                  "duration": 376,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/register')\n\t.send(testInput.newUser)\n\t.expect('Content-Type', /json/)\n\t.expect(201, done);",
                  "err": {},
                  "uuid": "fd9004de-cb42-4809-9d5b-3468f2b86373",
                  "parentUUID": "a2c297dc-0a0c-4a49-85d0-77b54b22aaba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Register new user with duplicated email",
                  "fullTitle": "App test Register a new user in the database Register new user with duplicated email",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/register')\n\t.send(testInput.newUserDupEmail)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Email is already registered\"\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "5efe501b-267d-4a2d-a9a7-a400b77dc9bd",
                  "parentUUID": "a2c297dc-0a0c-4a49-85d0-77b54b22aaba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Register new user without lastname and firstname",
                  "fullTitle": "App test Register a new user in the database Register new user without lastname and firstname",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/register')\n\t.send(testInput.newUserNoFullName)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Missing firstname, lastname, email, or password\"\n\t})\n\t.expect(400, done)",
                  "err": {},
                  "uuid": "5371a962-5607-4efb-84a6-901980d2eb08",
                  "parentUUID": "a2c297dc-0a0c-4a49-85d0-77b54b22aaba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Register new user without firstname",
                  "fullTitle": "App test Register a new user in the database Register new user without firstname",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/register')\n\t.send(testInput.newUserNoFirstname)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Missing firstname, lastname, email, or password\"\n\t})\n\t.expect(400, done)",
                  "err": {},
                  "uuid": "4a3689ea-d38e-404a-a596-7489f13989e5",
                  "parentUUID": "a2c297dc-0a0c-4a49-85d0-77b54b22aaba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Register new user without lastname",
                  "fullTitle": "App test Register a new user in the database Register new user without lastname",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/register')\n\t.send(testInput.newUserNoLastname)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Missing firstname, lastname, email, or password\"\n\t})\n\t.expect(400, done)",
                  "err": {},
                  "uuid": "839607ba-00a1-4f07-89f5-5727957b7d79",
                  "parentUUID": "a2c297dc-0a0c-4a49-85d0-77b54b22aaba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Register new user without email",
                  "fullTitle": "App test Register a new user in the database Register new user without email",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/register')\n\t.send(testInput.newUserNoEmail)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Missing firstname, lastname, email, or password\"\n\t})\n\t.expect(400, done)",
                  "err": {},
                  "uuid": "7006a24b-ed84-4ebb-a2b8-9e943fa72a6d",
                  "parentUUID": "a2c297dc-0a0c-4a49-85d0-77b54b22aaba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Register new user without password",
                  "fullTitle": "App test Register a new user in the database Register new user without password",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/register')\n\t.send(testInput.newUserNoPassword)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Missing firstname, lastname, email, or password\"\n\t})\n\t.expect(400, done)",
                  "err": {},
                  "uuid": "49532b4a-560f-474c-95bd-bc4eee768298",
                  "parentUUID": "a2c297dc-0a0c-4a49-85d0-77b54b22aaba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Register new user with invalid email",
                  "fullTitle": "App test Register a new user in the database Register new user with invalid email",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/register')\n\t.send(testInput.newUserInvalidEmail)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Invalid Email\"\n\t})\n\t.expect(400, done)",
                  "err": {},
                  "uuid": "22a543dc-4360-456b-ac53-263758669d0e",
                  "parentUUID": "a2c297dc-0a0c-4a49-85d0-77b54b22aaba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Link local user details with facebook details",
                  "fullTitle": "App test Register a new user in the database Link local user details with facebook details",
                  "timedOut": false,
                  "duration": 228,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/register')\n\t.send(testInput.localUserRegister)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Thank you for registering - Please log in\"\n\t})\n\t.expect(200, done)",
                  "err": {},
                  "uuid": "1b817568-f038-47f5-9a63-cb07fc276341",
                  "parentUUID": "a2c297dc-0a0c-4a49-85d0-77b54b22aaba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Register new user with already existing email and google log in",
                  "fullTitle": "App test Register a new user in the database Register new user with already existing email and google log in",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/register')\n\t.send(testInput.localInvalidUserRegister)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Email is already registered\"\n\t})\n\t.expect(200, done)",
                  "err": {},
                  "uuid": "a88a7b75-0731-4e29-9b4b-64c12f6c0a4d",
                  "parentUUID": "a2c297dc-0a0c-4a49-85d0-77b54b22aaba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fd9004de-cb42-4809-9d5b-3468f2b86373",
                "5efe501b-267d-4a2d-a9a7-a400b77dc9bd",
                "5371a962-5607-4efb-84a6-901980d2eb08",
                "4a3689ea-d38e-404a-a596-7489f13989e5",
                "839607ba-00a1-4f07-89f5-5727957b7d79",
                "7006a24b-ed84-4ebb-a2b8-9e943fa72a6d",
                "49532b4a-560f-474c-95bd-bc4eee768298",
                "22a543dc-4360-456b-ac53-263758669d0e",
                "1b817568-f038-47f5-9a63-cb07fc276341",
                "a88a7b75-0731-4e29-9b4b-64c12f6c0a4d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 730,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6fc23b25-4531-4ad7-90ba-be249257aaf9",
              "title": "Search users in database",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Search an existing user by firstname with exact spelling",
                  "fullTitle": "App test Search users in database Search an existing user by firstname with exact spelling",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/search?key=TinTin')\n\t.expect('Content-Type', /json/)\n\t.expect( function(res) {\n\t\tif (res.body.data.length !== 1){\n\t\t\tthrow new Error(\"Not finding the correct number of matches\");\n\t\t}\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "e8d4abc3-679a-47e3-88aa-c794ab1ef549",
                  "parentUUID": "6fc23b25-4531-4ad7-90ba-be249257aaf9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Search an existing user by firstname case-sensitively",
                  "fullTitle": "App test Search users in database Search an existing user by firstname case-sensitively",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/search?key=tintin')\n\t.expect('Content-Type', /json/)\n\t.expect( function(res) {\n\t\tif (res.body.data.length !== 1){\n\t\t\tthrow new Error(\"Not finding the correct number of matches\");\n\t\t}\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "420083cc-9422-4a4a-a7b7-9bc4ea46aa9a",
                  "parentUUID": "6fc23b25-4531-4ad7-90ba-be249257aaf9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Search multiple existing users by lastname",
                  "fullTitle": "App test Search users in database Search multiple existing users by lastname",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/search?key=random')\n\t.expect('Content-Type', /json/)\n\t.expect( function(res) {\n\t\tif (res.body.data.length !== 2){\n\t\t\tthrow new Error(\"Not finding the correct number of matches\");\n\t\t}\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "e0645ba9-ae61-4e95-961b-f1fba5ab24b8",
                  "parentUUID": "6fc23b25-4531-4ad7-90ba-be249257aaf9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Search existing users by fullname with space in the middle",
                  "fullTitle": "App test Search users in database Search existing users by fullname with space in the middle",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/search?key=tintin random')\n\t.expect('Content-Type', /json/)\n\t.expect( function(res) {\n\t\tif (res.body.data.length !== 1){\n\t\t\tthrow new Error(\"Not finding the correct number of matches\");\n\t\t}\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "ed8efb68-ac13-424e-b12a-16f80efb6ec6",
                  "parentUUID": "6fc23b25-4531-4ad7-90ba-be249257aaf9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Search existing users by fullname without space in the middle",
                  "fullTitle": "App test Search users in database Search existing users by fullname without space in the middle",
                  "timedOut": false,
                  "duration": 33,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/search?key=tintinrandom')\n\t.expect('Content-Type', /json/)\n\t.expect( {\n\t\tmessage: 'No matching result'\n\t})\n\t.expect(404, done);",
                  "err": {},
                  "uuid": "05fca95a-9b01-4fe5-b483-dae325bc147d",
                  "parentUUID": "6fc23b25-4531-4ad7-90ba-be249257aaf9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Search existing users with space at the two ends",
                  "fullTitle": "App test Search users in database Search existing users with space at the two ends",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/search?key=     tintin random    ')\n\t.expect('Content-Type', /json/)\n\t.expect( function(res) {\n\t\tif (res.body.data.length !== 1){\n\t\t\tthrow new Error(\"Not finding the correct number of matches\");\n\t\t}\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "4acb79fe-8ebc-46ae-9447-e9c6c5364039",
                  "parentUUID": "6fc23b25-4531-4ad7-90ba-be249257aaf9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Search only spaces",
                  "fullTitle": "App test Search users in database Search only spaces",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/search?key=        ')\n\t.expect('Content-Type', /json/)\n\t.expect( {\n\t\tmessage: \"Please input something to search for\"\n\t})\n\t.expect(400, done);",
                  "err": {},
                  "uuid": "69217ef6-44d5-4bf4-bcb1-b62d8070fb64",
                  "parentUUID": "6fc23b25-4531-4ad7-90ba-be249257aaf9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Search non-existing users",
                  "fullTitle": "App test Search users in database Search non-existing users",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/search?key=Laker Champ')\n\t.expect('Content-Type', /json/)\n\t.expect( {\n\t\tmessage: 'No matching result'\n\t})\n\t.expect(404, done);",
                  "err": {},
                  "uuid": "2799ea78-2342-4b9e-a129-d90ea113a120",
                  "parentUUID": "6fc23b25-4531-4ad7-90ba-be249257aaf9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Search nothing",
                  "fullTitle": "App test Search users in database Search nothing",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/search?key=')\n\t.expect('Content-Type', /json/)\n\t.expect( {\n\t\tmessage: \"Please input something to search for\"\n\t})\n\t.expect(400, done);",
                  "err": {},
                  "uuid": "b60a6dba-d5d4-42f6-af4f-b6f5e8307ea6",
                  "parentUUID": "6fc23b25-4531-4ad7-90ba-be249257aaf9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8d4abc3-679a-47e3-88aa-c794ab1ef549",
                "420083cc-9422-4a4a-a7b7-9bc4ea46aa9a",
                "e0645ba9-ae61-4e95-961b-f1fba5ab24b8",
                "ed8efb68-ac13-424e-b12a-16f80efb6ec6",
                "05fca95a-9b01-4fe5-b483-dae325bc147d",
                "4acb79fe-8ebc-46ae-9447-e9c6c5364039",
                "69217ef6-44d5-4bf4-bcb1-b62d8070fb64",
                "2799ea78-2342-4b9e-a129-d90ea113a120",
                "b60a6dba-d5d4-42f6-af4f-b6f5e8307ea6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 312,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "html": "false"
      },
      "version": "5.1.0"
    }
  }
}