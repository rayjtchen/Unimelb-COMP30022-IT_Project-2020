{
  "stats": {
    "suites": 14,
    "tests": 48,
    "passes": 48,
    "pending": 0,
    "failures": 0,
    "start": "2020-10-17T05:55:28.471Z",
    "end": "2020-10-17T05:55:32.787Z",
    "duration": 4316,
    "testsRegistered": 48,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "022bdb90-3712-4cef-b5d4-492cd05980b1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8fd3a685-31b3-4730-85af-152bd5bfbcad",
          "title": "App test",
          "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
          "file": "\\test\\app.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"App test\"",
              "fullTitle": "App test \"before all\" hook in \"App test\"",
              "timedOut": false,
              "duration": 710,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(15000);\n// starting local server\nserver = app.listen(5001);\n// inserting all tests into mock database\nawait User.insertMany(testInput.userTests);\nawait ItemBlock.insertMany(testInput.itemTests);\nawait ProfileBlock.insertMany(testInput.profileTests);",
              "err": {},
              "uuid": "0fca9740-ce7e-43a5-aa01-7971585a5589",
              "parentUUID": "8fd3a685-31b3-4730-85af-152bd5bfbcad",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"App test\"",
              "fullTitle": "App test \"after all\" hook in \"App test\"",
              "timedOut": false,
              "duration": 119,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(15000);\nawait User.deleteMany({});\nawait ItemBlock.deleteMany({});\nawait ProfileBlock.deleteMany({});\nawait mongoose.connection.close();\nawait server.close();",
              "err": {},
              "uuid": "4baa6e3d-951e-4bdd-9cf5-2dc579195b77",
              "parentUUID": "8fd3a685-31b3-4730-85af-152bd5bfbcad",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "eeb52c8b-8c7a-4953-b7bf-3e4f75757b5b",
              "title": "Getting all users from database",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Getting all existing users",
                  "fullTitle": "App test Getting all users from database Getting all existing users",
                  "timedOut": false,
                  "duration": 128,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(15000);\nrequest(app)\n\t.get('/api/users/alluser')\n\t.expect('Content-Type', /json/)\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "6dcf4976-8c0c-40c6-b2aa-948fcae2c09a",
                  "parentUUID": "eeb52c8b-8c7a-4953-b7bf-3e4f75757b5b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6dcf4976-8c0c-40c6-b2aa-948fcae2c09a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 128,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "18afe666-7dd3-4ef5-a5bc-b3750d8c6506",
              "title": "Login a user into our website",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "User logins in with incorrect email",
                  "fullTitle": "App test Login a user into our website User logins in with incorrect email",
                  "timedOut": false,
                  "duration": 102,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/login')\n\t.send(testInput.loginInvalidEmail)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tmessage: 'Email or Password is incorrect'\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "7d7a785a-4c62-45c5-8847-d29b90f06e32",
                  "parentUUID": "18afe666-7dd3-4ef5-a5bc-b3750d8c6506",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "User logins in with incorrect password",
                  "fullTitle": "App test Login a user into our website User logins in with incorrect password",
                  "timedOut": false,
                  "duration": 235,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/login')\n\t.send(testInput.loginInvalidPassword)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tmessage: 'Email or Password is incorrect'\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "3429d33c-2550-47e1-89fd-da19256e3fb8",
                  "parentUUID": "18afe666-7dd3-4ef5-a5bc-b3750d8c6506",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "User puts correct credentials but did not confirm email",
                  "fullTitle": "App test Login a user into our website User puts correct credentials but did not confirm email",
                  "timedOut": false,
                  "duration": 236,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/login')\n\t.send(testInput.loginEmailNotConfirm)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tmessage: 'Confirm your email'\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "129a68da-888f-4a32-a34e-57ad70f18874",
                  "parentUUID": "18afe666-7dd3-4ef5-a5bc-b3750d8c6506",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "User logs in successfully",
                  "fullTitle": "App test Login a user into our website User logs in successfully",
                  "timedOut": false,
                  "duration": 175,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/login')\n\t.send(testInput.loginOkay)\n\t.expect('Content-Type', /json/)\n\t.expect(200)\n\t.end((err, res) => {\n\t\tuser_id = res.body.userAuthToken._id;\n\t\taccess_token = res.body.userAuthToken.token;\n\t\trefresh_token = res.body.userAuthToken.refresh_token;\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "913bd273-a751-4903-bfa4-5a7870fdb736",
                  "parentUUID": "18afe666-7dd3-4ef5-a5bc-b3750d8c6506",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d7a785a-4c62-45c5-8847-d29b90f06e32",
                "3429d33c-2550-47e1-89fd-da19256e3fb8",
                "129a68da-888f-4a32-a34e-57ad70f18874",
                "913bd273-a751-4903-bfa4-5a7870fdb736"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 748,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "721cac53-9762-4f04-b447-29c0f265e1e0",
              "title": "Authenticate JWT",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Incorrect JWT provided",
                  "fullTitle": "App test Authenticate JWT Incorrect JWT provided",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/authenticate')\n\t.set(\"Authorization\", testInput.authInvalidToken)\n\t.expect({\n\t\tmessage: \"Token provided is invalid\",\n\t\tstatus: false\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "6a6a7cdc-6ff1-48f4-984f-c8263e58b87d",
                  "parentUUID": "721cac53-9762-4f04-b447-29c0f265e1e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Bearer header not provided",
                  "fullTitle": "App test Authenticate JWT Bearer header not provided",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/authenticate')\n\t.set(\"Authorization\", testInput.authBearerNotProvided)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tmessage: \"Token provided is invalid\",\n\t\tstatus: false\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "f12ca084-9ffe-4647-ba35-1debe231de81",
                  "parentUUID": "721cac53-9762-4f04-b447-29c0f265e1e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid access token provided",
                  "fullTitle": "App test Authenticate JWT Valid access token provided",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/authenticate')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.expect('Content-Type', /json/)\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "049f744c-9f27-4e31-8e11-3f9cc51b5e27",
                  "parentUUID": "721cac53-9762-4f04-b447-29c0f265e1e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a6a7cdc-6ff1-48f4-984f-c8263e58b87d",
                "f12ca084-9ffe-4647-ba35-1debe231de81",
                "049f744c-9f27-4e31-8e11-3f9cc51b5e27"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 26,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ee537f5a-756d-45c7-91dc-b60e1b542bfe",
              "title": "Testing /api/itemblocks/create route",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Create item block with correct details",
                  "fullTitle": "App test Testing /api/itemblocks/create route Create item block with correct details",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const correctItemDetails = testInput.correctItemDetails;\ncorrectItemDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/itemblocks/create')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(correctItemDetails)\n\t.expect('Content-Type', /json/)\n\t.expect(201)\n\t.end((err, res) => {\n\t\titem_id = res.body.item._id;\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "0b3231a5-53a3-4bc4-ad93-5b8a945f63cf",
                  "parentUUID": "ee537f5a-756d-45c7-91dc-b60e1b542bfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create item block with incorrect details",
                  "fullTitle": "App test Testing /api/itemblocks/create route Create item block with incorrect details",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const incorrectItemDetails = testInput.incorrectItemDetails;\nincorrectItemDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/itemblocks/create')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(incorrectItemDetails)\n\t.expect('Content-Type', /json/)\n\t.expect(500, done);",
                  "err": {},
                  "uuid": "fa5db7d7-8d0e-4ad2-bb77-86bd4507a059",
                  "parentUUID": "ee537f5a-756d-45c7-91dc-b60e1b542bfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create item block with missing details",
                  "fullTitle": "App test Testing /api/itemblocks/create route Create item block with missing details",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const missingItemDetails = testInput.missingItemDetails;\nmissingItemDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/itemblocks/create')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(missingItemDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Missing either user id, type of item block, its title or the contents body\"\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "b514d6b9-f9c4-4df7-8df6-089e4fd69495",
                  "parentUUID": "ee537f5a-756d-45c7-91dc-b60e1b542bfe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b3231a5-53a3-4bc4-ad93-5b8a945f63cf",
                "fa5db7d7-8d0e-4ad2-bb77-86bd4507a059",
                "b514d6b9-f9c4-4df7-8df6-089e4fd69495"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 68,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "90fcdce3-40b9-4386-9976-190a6f026a7b",
              "title": "Testing /api/itemblocks/update route",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Update item block with correct details",
                  "fullTitle": "App test Testing /api/itemblocks/update route Update item block with correct details",
                  "timedOut": false,
                  "duration": 58,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rightUpdItemDetails = testInput.rightUpdItemDetails;\nrightUpdItemDetails.user_id = user_id;\nrightUpdItemDetails.item_id = item_id;\nrequest(app)\n\t.post('/api/itemblocks/update')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(rightUpdItemDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Item block has been successfully updated\"\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "7d2a3c8f-a7ce-4055-9000-6059ec72ed95",
                  "parentUUID": "90fcdce3-40b9-4386-9976-190a6f026a7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update item block with incorrect details",
                  "fullTitle": "App test Testing /api/itemblocks/update route Update item block with incorrect details",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const wrongUpdItemDetails = testInput.wrongUpdItemDetails;\nwrongUpdItemDetails.user_id = user_id;\nwrongUpdItemDetails.item_id = item_id;\nrequest(app)\n\t.post('/api/itemblocks/update')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(wrongUpdItemDetails)\n\t.expect('Content-Type', /json/)\n\t// incorrect details are ignored when updating item blocks\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "8ff70e29-a476-4944-96a4-68d6b96771a3",
                  "parentUUID": "90fcdce3-40b9-4386-9976-190a6f026a7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update item block with missing details",
                  "fullTitle": "App test Testing /api/itemblocks/update route Update item block with missing details",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const missUpdItemDetails = {};\n// forgot item_id and contents \nmissUpdItemDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/itemblocks/update')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(missUpdItemDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Missing either user id, item id, or the body of change\"\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "03337f63-eeb7-4aeb-ae6b-2dd6c6410f20",
                  "parentUUID": "90fcdce3-40b9-4386-9976-190a6f026a7b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d2a3c8f-a7ce-4055-9000-6059ec72ed95",
                "8ff70e29-a476-4944-96a4-68d6b96771a3",
                "03337f63-eeb7-4aeb-ae6b-2dd6c6410f20"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 121,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "497b520f-8f45-4951-ac29-5371e7897f8f",
              "title": "Testing /api/itemblocks/delete route",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Delete item block with missing details",
                  "fullTitle": "App test Testing /api/itemblocks/delete route Delete item block with missing details",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const missingDeleteItemDetails = {};\n// forgot item_id\nmissingDeleteItemDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/itemblocks/delete')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(missingDeleteItemDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Missing either user id or item id\"\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "2a628e40-3868-460d-9381-a3c0f09cba53",
                  "parentUUID": "497b520f-8f45-4951-ac29-5371e7897f8f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete item block with incorrect details",
                  "fullTitle": "App test Testing /api/itemblocks/delete route Delete item block with incorrect details",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const incorrectDeleteItemDetails = {};\nincorrectDeleteItemDetails.item_id = mongoose.Types.ObjectId('1121b706175df1546e3acb09');\nincorrectDeleteItemDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/itemblocks/delete')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(incorrectDeleteItemDetails)\n\t.expect('Content-Type', /json/)\n\t// even though item block doesn't exist, database operation still returns something\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "f6d98f8d-047a-4168-a8b6-2a4216ad2928",
                  "parentUUID": "497b520f-8f45-4951-ac29-5371e7897f8f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete item block with correct details",
                  "fullTitle": "App test Testing /api/itemblocks/delete route Delete item block with correct details",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const correctDeleteItemDetails = {};\ncorrectDeleteItemDetails.user_id = user_id;\ncorrectDeleteItemDetails.item_id = item_id;\nrequest(app)\n\t.post('/api/itemblocks/delete')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(correctDeleteItemDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Item block has been successfully deleted\"\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "9a5199db-9297-4a44-965f-4d7e6bf45657",
                  "parentUUID": "497b520f-8f45-4951-ac29-5371e7897f8f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2a628e40-3868-460d-9381-a3c0f09cba53",
                "f6d98f8d-047a-4168-a8b6-2a4216ad2928",
                "9a5199db-9297-4a44-965f-4d7e6bf45657"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 116,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fb0a8def-24d1-40ab-9833-b03193f67a24",
              "title": "Testing /api/profileblocks/create route",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Create profile block with correct details",
                  "fullTitle": "App test Testing /api/profileblocks/create route Create profile block with correct details",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const correctProfileDetails = testInput.correctProfileDetails;\ncorrectProfileDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/profileblocks/create')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(correctProfileDetails)\n\t.expect('Content-Type', /json/)\n\t.expect(201)\n\t.end((err, res) => {\n\t\tprofile_id = res.body.profile._id;\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "8dd2e198-937c-41b4-af12-c7d3f6f35b07",
                  "parentUUID": "fb0a8def-24d1-40ab-9833-b03193f67a24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create profile block with missing details",
                  "fullTitle": "App test Testing /api/profileblocks/create route Create profile block with missing details",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// no user id is provided\nconst missingProfileDetails = testInput.missingProfileDetails;\nrequest(app)\n\t.post('/api/profileblocks/create')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(missingProfileDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tmessage: \"Request is invalid for current user\"\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "aa9b482f-04df-45b6-84f6-6cd98e12b27a",
                  "parentUUID": "fb0a8def-24d1-40ab-9833-b03193f67a24",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8dd2e198-937c-41b4-af12-c7d3f6f35b07",
                "aa9b482f-04df-45b6-84f6-6cd98e12b27a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 72,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a6266570-eeca-4911-a4eb-76428cf5885f",
              "title": "Testing /api/profileblocks/update route",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Update profile block with correct details",
                  "fullTitle": "App test Testing /api/profileblocks/update route Update profile block with correct details",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rightUpdProfileDetails = testInput.rightUpdProfileDetails;\nrightUpdProfileDetails.user_id = user_id;\nrightUpdProfileDetails.profile_id = profile_id;\nrequest(app)\n\t.post('/api/profileblocks/update')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(rightUpdProfileDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Profile block has been successfully updated\"\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "244aeb97-89fd-462f-a702-2b1ccf3a5315",
                  "parentUUID": "a6266570-eeca-4911-a4eb-76428cf5885f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update profile block with incorrect details",
                  "fullTitle": "App test Testing /api/profileblocks/update route Update profile block with incorrect details",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const wrongUpdProfileDetails = testInput.wrongUpdProfileDetails;\nwrongUpdProfileDetails.user_id = user_id;\n// profile block doesn't exist in test database\nwrongUpdProfileDetails.profile_id = mongoose.Types.ObjectId('f3d6c9d62d60d057f0644009');\nrequest(app)\n\t.post('/api/profileblocks/update')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(wrongUpdProfileDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Profile block does not exist in our database\"\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "b8fd1f4d-444b-40e3-8c23-60f53c1d705f",
                  "parentUUID": "a6266570-eeca-4911-a4eb-76428cf5885f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update profile block with missing details",
                  "fullTitle": "App test Testing /api/profileblocks/update route Update profile block with missing details",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const missUpdProfileDetails = {};\n// forgot profile_id and contents body \nmissUpdProfileDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/profileblocks/update')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(missUpdProfileDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Missing user id, profile id or profile attributes that needs to be changed\"\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "a4e5c4c6-7752-4a00-83b7-487c87bb41a8",
                  "parentUUID": "a6266570-eeca-4911-a4eb-76428cf5885f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "244aeb97-89fd-462f-a702-2b1ccf3a5315",
                "b8fd1f4d-444b-40e3-8c23-60f53c1d705f",
                "a4e5c4c6-7752-4a00-83b7-487c87bb41a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 127,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aa77ff87-5709-4802-a4f8-d3bddb15cb9d",
              "title": "Testing /api/profileblocks/delete route",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Delete profile block with missing details",
                  "fullTitle": "App test Testing /api/profileblocks/delete route Delete profile block with missing details",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const missingDeleteProfileDetails = {};\n// forgot profile_id\nmissingDeleteProfileDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/profileblocks/delete')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(missingDeleteProfileDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Missing user id or profile id\"\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "e0850501-50a6-4c8f-b3f5-df6549ec3a69",
                  "parentUUID": "aa77ff87-5709-4802-a4f8-d3bddb15cb9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete profile block with incorrect details",
                  "fullTitle": "App test Testing /api/profileblocks/delete route Delete profile block with incorrect details",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const incorrectDeleteProfileDetails = {};\nincorrectDeleteProfileDetails.profile_id = mongoose.Types.ObjectId('1121b706175df1546e3acb09');\nincorrectDeleteProfileDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/profileblocks/delete')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(incorrectDeleteProfileDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Profile block does not exist in our database\"\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "00c459f1-30da-4392-b498-618492fdfa89",
                  "parentUUID": "aa77ff87-5709-4802-a4f8-d3bddb15cb9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete profile block with correct details",
                  "fullTitle": "App test Testing /api/profileblocks/delete route Delete profile block with correct details",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const correctDeleteProfileDetails = {};\ncorrectDeleteProfileDetails.user_id = user_id;\ncorrectDeleteProfileDetails.profile_id = profile_id;\nrequest(app)\n\t.post('/api/profileblocks/delete')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(correctDeleteProfileDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Profile block has been successfully deleted\"\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "743adbba-6589-492d-b9de-3cc91cd09411",
                  "parentUUID": "aa77ff87-5709-4802-a4f8-d3bddb15cb9d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e0850501-50a6-4c8f-b3f5-df6549ec3a69",
                "00c459f1-30da-4392-b498-618492fdfa89",
                "743adbba-6589-492d-b9de-3cc91cd09411"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 120,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4f3cf647-b4c5-4b85-a2c6-6258f30fcec1",
              "title": "Testing /api/users/update endpoint",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Correct details provided",
                  "fullTitle": "App test Testing /api/users/update endpoint Correct details provided",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const correctUserDetails = testInput.rightUpdateUserDetails;\ncorrectUserDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/users/update')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(correctUserDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"User details have been successfully updated\"\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "8f9674c8-fbb7-43e8-b847-d859e049713a",
                  "parentUUID": "4f3cf647-b4c5-4b85-a2c6-6258f30fcec1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Missing body provided",
                  "fullTitle": "App test Testing /api/users/update endpoint Missing body provided",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const missingUserDetails = {};\nmissingUserDetails.user_id = user_id;\nrequest(app)\n\t.post('/api/users/update')\n\t.set(\"Authorization\", \"Bearer \" + access_token)\n\t.send(missingUserDetails)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Include body of change\"\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "47093e85-21e9-4c17-aae1-cfc243693dbb",
                  "parentUUID": "4f3cf647-b4c5-4b85-a2c6-6258f30fcec1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f9674c8-fbb7-43e8-b847-d859e049713a",
                "47093e85-21e9-4c17-aae1-cfc243693dbb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 71,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f2d13650-385d-4154-bc9f-5add55f4ad89",
              "title": "Retrieve new access token",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Invalid refresh token is provided",
                  "fullTitle": "App test Retrieve new access token Invalid refresh token is provided",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/refresh')\n\t.send(testInput.invalidRefreshToken)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tmessage: \"Token is invalid\",\n\t\tstatus: false\n\t})\n\t.expect(401, done);",
                  "err": {},
                  "uuid": "5ec79c47-dd54-44e0-b2b9-3b76f82b70cd",
                  "parentUUID": "f2d13650-385d-4154-bc9f-5add55f4ad89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid refresh token is provided",
                  "fullTitle": "App test Retrieve new access token Valid refresh token is provided",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const postBody = {\n\trefresh_token: refresh_token\n};\nrequest(app)\n\t.post('/api/users/refresh')\n\t.send(postBody)\n\t.expect('Content-Type', /json/)\n\t.expect(201, done);",
                  "err": {},
                  "uuid": "a4b3f1f8-ce19-4d91-835c-3345679da149",
                  "parentUUID": "f2d13650-385d-4154-bc9f-5add55f4ad89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5ec79c47-dd54-44e0-b2b9-3b76f82b70cd",
                "a4b3f1f8-ce19-4d91-835c-3345679da149"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 34,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "152ae0ea-b17b-44ef-bc4b-07fdf4fd1503",
              "title": "Register a new user in the database",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Register new user with unique email",
                  "fullTitle": "App test Register a new user in the database Register new user with unique email",
                  "timedOut": false,
                  "duration": 358,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/register')\n\t.send(testInput.newUser)\n\t.expect('Content-Type', /json/)\n\t.expect(201, done);",
                  "err": {},
                  "uuid": "a5bb5346-f5fd-4248-b696-9bc87f97d387",
                  "parentUUID": "152ae0ea-b17b-44ef-bc4b-07fdf4fd1503",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Register new user with duplicated email",
                  "fullTitle": "App test Register a new user in the database Register new user with duplicated email",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/register')\n\t.send(testInput.newUserDupEmail)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Email is already registered\"\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "f8b3ed86-c343-43d0-bb02-a0f0359699b2",
                  "parentUUID": "152ae0ea-b17b-44ef-bc4b-07fdf4fd1503",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Register new user without lastname and firstname",
                  "fullTitle": "App test Register a new user in the database Register new user without lastname and firstname",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/register')\n\t.send(testInput.newUserNoFullName)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Missing firstname, lastname, email, or password\"\n\t})\n\t.expect(400, done)",
                  "err": {},
                  "uuid": "23191c41-4ae9-4f7d-996d-e86dc357b750",
                  "parentUUID": "152ae0ea-b17b-44ef-bc4b-07fdf4fd1503",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Register new user without firstname",
                  "fullTitle": "App test Register a new user in the database Register new user without firstname",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/register')\n\t.send(testInput.newUserNoFirstname)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Missing firstname, lastname, email, or password\"\n\t})\n\t.expect(400, done)",
                  "err": {},
                  "uuid": "a150a4a6-10ef-40d4-a0bf-34357964b821",
                  "parentUUID": "152ae0ea-b17b-44ef-bc4b-07fdf4fd1503",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Register new user without lastname",
                  "fullTitle": "App test Register a new user in the database Register new user without lastname",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/register')\n\t.send(testInput.newUserNoLastname)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Missing firstname, lastname, email, or password\"\n\t})\n\t.expect(400, done)",
                  "err": {},
                  "uuid": "5f579b87-2a91-40a7-a08e-57b92ea74be0",
                  "parentUUID": "152ae0ea-b17b-44ef-bc4b-07fdf4fd1503",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Register new user without email",
                  "fullTitle": "App test Register a new user in the database Register new user without email",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/register')\n\t.send(testInput.newUserNoEmail)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Missing firstname, lastname, email, or password\"\n\t})\n\t.expect(400, done)",
                  "err": {},
                  "uuid": "53e71be1-09e5-4007-96dc-d0f945432b3e",
                  "parentUUID": "152ae0ea-b17b-44ef-bc4b-07fdf4fd1503",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Register new user without password",
                  "fullTitle": "App test Register a new user in the database Register new user without password",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/register')\n\t.send(testInput.newUserNoPassword)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Missing firstname, lastname, email, or password\"\n\t})\n\t.expect(400, done)",
                  "err": {},
                  "uuid": "febe4328-5b39-40ce-a1d4-de5a98d13caf",
                  "parentUUID": "152ae0ea-b17b-44ef-bc4b-07fdf4fd1503",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Register new user with invalid email",
                  "fullTitle": "App test Register a new user in the database Register new user with invalid email",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/register')\n\t.send(testInput.newUserInvalidEmail)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Invalid Email\"\n\t})\n\t.expect(400, done)",
                  "err": {},
                  "uuid": "04298364-0ab7-427d-bdad-87de76e592cb",
                  "parentUUID": "152ae0ea-b17b-44ef-bc4b-07fdf4fd1503",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Link local user details with facebook details",
                  "fullTitle": "App test Register a new user in the database Link local user details with facebook details",
                  "timedOut": false,
                  "duration": 228,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/register')\n\t.send(testInput.localUserRegister)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Thank you for registering - Please log in\"\n\t})\n\t.expect(200, done)",
                  "err": {},
                  "uuid": "1c95734d-e78e-40c3-99f0-7d9614f9ef02",
                  "parentUUID": "152ae0ea-b17b-44ef-bc4b-07fdf4fd1503",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Register new user with already existing email and google log in",
                  "fullTitle": "App test Register a new user in the database Register new user with already existing email and google log in",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post('/api/users/register')\n\t.send(testInput.localInvalidUserRegister)\n\t.expect('Content-Type', /json/)\n\t.expect({\n\t\tstatus: \"Email is already registered\"\n\t})\n\t.expect(200, done)",
                  "err": {},
                  "uuid": "5484c31d-87d3-4ddb-b9be-c7ef17631604",
                  "parentUUID": "152ae0ea-b17b-44ef-bc4b-07fdf4fd1503",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a5bb5346-f5fd-4248-b696-9bc87f97d387",
                "f8b3ed86-c343-43d0-bb02-a0f0359699b2",
                "23191c41-4ae9-4f7d-996d-e86dc357b750",
                "a150a4a6-10ef-40d4-a0bf-34357964b821",
                "5f579b87-2a91-40a7-a08e-57b92ea74be0",
                "53e71be1-09e5-4007-96dc-d0f945432b3e",
                "febe4328-5b39-40ce-a1d4-de5a98d13caf",
                "04298364-0ab7-427d-bdad-87de76e592cb",
                "1c95734d-e78e-40c3-99f0-7d9614f9ef02",
                "5484c31d-87d3-4ddb-b9be-c7ef17631604"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 767,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "98a5a993-539a-4290-9daf-1bf2b7c989d4",
              "title": "Search users in database",
              "fullFile": "C:\\Users\\haoxi\\Documents\\COMP ITProject\\UNIMELB-IT-PROJECT\\test\\app.test.js",
              "file": "\\test\\app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Search an existing user by firstname with exact spelling",
                  "fullTitle": "App test Search users in database Search an existing user by firstname with exact spelling",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/search?key=TinTin')\n\t.expect('Content-Type', /json/)\n\t.expect( function(res) {\n\t\tif (res.body.data.length !== 1){\n\t\t\tthrow new Error(\"Not finding the correct number of matches\");\n\t\t}\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "ce7b1166-a0eb-4545-8c65-fdf74732158b",
                  "parentUUID": "98a5a993-539a-4290-9daf-1bf2b7c989d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Search an existing user by firstname case-sensitively",
                  "fullTitle": "App test Search users in database Search an existing user by firstname case-sensitively",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/search?key=tintin')\n\t.expect('Content-Type', /json/)\n\t.expect( function(res) {\n\t\tif (res.body.data.length !== 1){\n\t\t\tthrow new Error(\"Not finding the correct number of matches\");\n\t\t}\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "cd4c854d-8a89-4a0c-b989-ac90dff0bf06",
                  "parentUUID": "98a5a993-539a-4290-9daf-1bf2b7c989d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Search multiple existing users by lastname",
                  "fullTitle": "App test Search users in database Search multiple existing users by lastname",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/search?key=random')\n\t.expect('Content-Type', /json/)\n\t.expect( function(res) {\n\t\tif (res.body.data.length !== 2){\n\t\t\tthrow new Error(\"Not finding the correct number of matches\");\n\t\t}\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "d3269e0e-fe5d-47bd-9104-9a6fc5150842",
                  "parentUUID": "98a5a993-539a-4290-9daf-1bf2b7c989d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Search existing users by fullname with space in the middle",
                  "fullTitle": "App test Search users in database Search existing users by fullname with space in the middle",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/search?key=tintin random')\n\t.expect('Content-Type', /json/)\n\t.expect( function(res) {\n\t\tif (res.body.data.length !== 1){\n\t\t\tthrow new Error(\"Not finding the correct number of matches\");\n\t\t}\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "b34fed6e-4e32-4ccf-b4e4-58a394c62837",
                  "parentUUID": "98a5a993-539a-4290-9daf-1bf2b7c989d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Search existing users by fullname without space in the middle",
                  "fullTitle": "App test Search users in database Search existing users by fullname without space in the middle",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/search?key=tintinrandom')\n\t.expect('Content-Type', /json/)\n\t.expect( {\n\t\tmessage: 'No matching result'\n\t})\n\t.expect(404, done);",
                  "err": {},
                  "uuid": "2208db64-3e56-49f1-b763-aed607b7c8be",
                  "parentUUID": "98a5a993-539a-4290-9daf-1bf2b7c989d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Search existing users with space at the two ends",
                  "fullTitle": "App test Search users in database Search existing users with space at the two ends",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/search?key=     tintin random    ')\n\t.expect('Content-Type', /json/)\n\t.expect( function(res) {\n\t\tif (res.body.data.length !== 1){\n\t\t\tthrow new Error(\"Not finding the correct number of matches\");\n\t\t}\n\t})\n\t.expect(200, done);",
                  "err": {},
                  "uuid": "465742fe-8203-4b4e-bd01-dab6012953fd",
                  "parentUUID": "98a5a993-539a-4290-9daf-1bf2b7c989d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Search only spaces",
                  "fullTitle": "App test Search users in database Search only spaces",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/search?key=        ')\n\t.expect('Content-Type', /json/)\n\t.expect( {\n\t\tmessage: \"Please input something to search for\"\n\t})\n\t.expect(400, done);",
                  "err": {},
                  "uuid": "aed8970e-5c7b-41d7-b541-bc119a8965ca",
                  "parentUUID": "98a5a993-539a-4290-9daf-1bf2b7c989d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Search non-existing users",
                  "fullTitle": "App test Search users in database Search non-existing users",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/search?key=Laker Champ')\n\t.expect('Content-Type', /json/)\n\t.expect( {\n\t\tmessage: 'No matching result'\n\t})\n\t.expect(404, done);",
                  "err": {},
                  "uuid": "0776d63d-df97-4f73-b1f5-4cf1e1d96f25",
                  "parentUUID": "98a5a993-539a-4290-9daf-1bf2b7c989d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Search nothing",
                  "fullTitle": "App test Search users in database Search nothing",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get('/api/users/search?key=')\n\t.expect('Content-Type', /json/)\n\t.expect( {\n\t\tmessage: \"Please input something to search for\"\n\t})\n\t.expect(400, done);",
                  "err": {},
                  "uuid": "f6005e2b-2274-403f-99cb-51962721564a",
                  "parentUUID": "98a5a993-539a-4290-9daf-1bf2b7c989d4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ce7b1166-a0eb-4545-8c65-fdf74732158b",
                "cd4c854d-8a89-4a0c-b989-ac90dff0bf06",
                "d3269e0e-fe5d-47bd-9104-9a6fc5150842",
                "b34fed6e-4e32-4ccf-b4e4-58a394c62837",
                "2208db64-3e56-49f1-b763-aed607b7c8be",
                "465742fe-8203-4b4e-bd01-dab6012953fd",
                "aed8970e-5c7b-41d7-b541-bc119a8965ca",
                "0776d63d-df97-4f73-b1f5-4cf1e1d96f25",
                "f6005e2b-2274-403f-99cb-51962721564a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 329,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}